<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# const int ArgumentLimit = 15; #>
namespace Func.UnitTests
{
    using System;

    using FluentAssertions;
    using NUnit.Framework;

    using static Currying;

    [TestFixture]
    public class CurryingTests
    {
<# for(var i = 2; i <= ArgumentLimit; ++i) { #>
        [Test]
        public void Curry_With<#= i #>Arguments_CallsCurriedFunc()
        {
            var hasBeenCalled = false;

            Func<<# WriteArgumentTypes(i); #>, string> TestMethod = (<# WriteArgumentsWithTypes(i); #>) =>
            {
                hasBeenCalled = true;
                return "Test";
            };

            var curriedMethod = Curry(TestMethod);

            curriedMethod<# WriteCallingArguments(i); #>;

            hasBeenCalled.Should().BeTrue();
        }

        [Test]
        public void Curry_With<#= i #>Arguments_ReturnsCurriedFuncValue()
        {
            Func<<# WriteArgumentTypes(i); #>, string> TestMethod = (<# WriteArgumentsWithTypes(i); #>) => "Test";

            var curriedMethod = Curry(TestMethod);

            var result = curriedMethod<# WriteCallingArguments(i); #>;

            result.Should().Be("Test");
        }

        [Test]
        public void Curry_With<#= i #>Arguments_CallsCurriedAction()
        {
            var hasBeenCalled = false;

            Action<<# WriteArgumentTypes(i); #>> TestMethod = (<# WriteArgumentsWithTypes(i); #>) =>
            {
                hasBeenCalled = true;
            };

            var curriedMethod = Curry(TestMethod);

            curriedMethod<# WriteCallingArguments(i); #>;

            hasBeenCalled.Should().BeTrue();
        }

<# } #>
    }
}
<#+
    void WriteArgumentsWithTypes(int count)
    {
        for(var i = 1; i <= count; ++i) { #>x<#= i #><#+ if(i < count) { #>, <#+ } }
    }

    void WriteArgumentTypes(int count)
    {
        for(var i = 1; i <= count; ++i) { #>int<#+ if(i < count) { #>, <#+ } }
    }

    void WriteCallingArguments(int count)
    {
        for(var i = 1; i <= count; ++i) { #>(<#= i #>)<#+ }
    }

    void WriteArguments(int count)
    {
        for(var i = 1; i <= count; ++i) { #><#= i #><#+ if(i < count) { #>, <#+ } }
    }
#>