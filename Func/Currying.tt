<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# const int ArgumentLimit = 15; #>
namespace Func
{
	using System;

<# for(var i = 2; i <= ArgumentLimit; ++i) { #>
	public delegate <# WriteValueFuncs(1, i); #>, TResult<# WriteClosingBrackets(i); #> CurriedFunc<<# WriteValueTypesReversed(i); #>, out TResult>(TArg<#= i #> arg<#= i #>);
	public delegate <# WriteValueFuncs(2, i); #><# if(i > 2) { #>, <# } #>Action<TArg1><# WriteClosingBrackets(i - 1); #> CurriedAction<<# WriteValueTypesReversed(i); #>>(TArg<#= i #> arg<#= i #>);
<# } #>

	public static class Currying
	{	
<# for(var i = 2; i <= ArgumentLimit; ++i) { #>
		public static CurriedFunc<<# WriteValueTypes(i); #>, TResult> Curry<<# WriteValueTypes(i); #>, TResult>(Func<<# WriteValueTypes(i); #>, TResult> func) =>
			<# WriteValueLambdas(i); #>func(<# WriteValueArguments(i); #>);

		public static CurriedAction<<# WriteValueTypes(i); #>> Curry<<# WriteValueTypes(i); #>>(Action<<# WriteValueTypes(i); #>> func) =>
			<# WriteValueLambdas(i); #>func(<# WriteValueArguments(i); #>);

<# } #>
	}
}
<#+
	void WriteValueTypes(int count)
	{
		for (var i = 1; i <= count; ++i) { #>TArg<#= i #><#+ if(i < count) { #>, <#+}}
	}

	void WriteValueTypesReversed(int count)
	{
		for (var i = count; i >= 1; --i) { #>in TArg<#= i #><#+ if(i > 1) { #>, <#+}}
	}

	void WriteValueFuncs(int start, int end)
	{
		for (var i = end - 1; i >= start; --i) { #>Func<TArg<#= i #><#+ if(i > start) { #>, <#+}}
	}

	void WriteClosingBrackets(int count)
	{
		for (var i = 1; i < count; ++i) { #>><#+}
	}

	void WriteValueLambdas(int count)
	{
		for (var i = 1; i <= count; ++i) { #>value<#= i #> => <#+}
	}

	void WriteValueArguments(int count)
	{
		for (var i = 1; i <= count; ++i) { #>value<#= i #><#+ if(i < count) { #>, <#+}}
	}
#>