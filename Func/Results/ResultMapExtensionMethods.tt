<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# const int ArgumentLimit = 6; #>
namespace Func
{
	using System;
	using System.Threading.Tasks;
#if NETSTANDARD2_1
	using static Func.Result;
#else
	using static Func.ResultHelper;
#endif

	public static class ResultMapExtensionMethods
	{
<# for(var i = 1; i <= ArgumentLimit; ++i) { #>
		public static Task<Result<TResult>> ThenMap<<# WriteValueTypes(i); #>, TResult>(this Task<Result<TValue<#= i #>>> valueTask, Func<<# WriteValueTypes(i); #>, Task<TResult>> func<# if(i > 1) { #>, <# } WriteValueTypesAndVariables(i - 1); #>) =>
			valueTask.ContinueWith(result => result.Result.Then(value<#= i #> => func(<# WriteValueVariables(i); #>).Map(Succeed<TResult>))).Unwrap();

		public static Task<Result<TResult>> ThenMap<<# WriteValueTypes(i); #>, TResult>(this Task<Result<TValue<#= i #>>> valueTask, Func<<# WriteValueTypes(i); #>, TResult> func<# if(i > 1) { #>, <# } WriteValueTypesAndVariables(i - 1); #>) =>
			valueTask.ContinueWith(result => result.Result.Then(value<#= i #> => func(<# WriteValueVariables(i); #>).Map(Succeed)));

		public static Task<Result<TResult>> ThenMap<<# WriteValueTypes(i); #>, TResult>(this Result<TValue<#= i #>> result, Func<<# WriteValueTypes(i); #>, Task<TResult>> func<# if(i > 1) { #>, <# } WriteValueTypesAndVariables(i - 1); #>) =>
			result.Then(value<#= i #> => func(<# WriteValueVariables(i); #>).Map(Succeed<TResult>));

		public static Result<TResult> ThenMap<<# WriteValueTypes(i); #>, TResult>(this Result<TValue<#= i #>> result, Func<<# WriteValueTypes(i); #>, TResult> func<# if(i > 1) { #>, <# } WriteValueTypesAndVariables(i - 1); #>) =>
			result.Then(value<#= i #> => func(<# WriteValueVariables(i); #>).Map(Succeed));

<# for(var j = 2; j < i; ++j) { #>
		public static Func<<# WriteValueTypesWithOffset(j, i); #>, Result<TResult>> ThenMap<<# WriteValueTypes(i); #>, TResult>(this Result<TValue<#= j-1 #>> result, Func<<# WriteValueTypes(i); #>, TResult> func<# if(j > 2) { #>, <# } WriteValueTypesAndVariables(j - 2); #>) =>
			(<# WriteValueVariablesWithOffset(j, i); #>) => result.Then(value<#= j-1 #> => func(<# WriteValueVariables(i); #>).Map(Succeed));

<# } #>
<# } #>
	}
}

<#+
	void WriteValueTypes(int count)
	{
		for (var i = 1; i <= count; ++i) { #>TValue<#= i #><#+ if(i < count) { #>, <#+}}
	}

	void WriteValueTypesWithOffset(int offset, int count)
	{
		for (var i = offset; i <= count; ++i) { #>TValue<#= i #><#+ if(i < count) { #>, <#+}}
	}

	void WriteValueVariables(int count)
	{
		for (var i = 1; i <= count; ++i) { #>value<#= i #><#+ if(i < count) { #>, <#+}}
	}

	void WriteValueVariablesWithOffset(int offset, int count)
	{
		for (var i = offset; i <= count; ++i) { #>value<#= i #><#+ if(i < count) { #>, <#+}}
	}
	
	void WriteValueTypesAndVariables(int count)
	{
		for (var i = 1; i <= count; ++i) { #>TValue<#= i #> value<#= i #><#+ if(i < count) { #>, <#+}}
	}
	
	void WriteValueTypesAndVariablesWithOffset(int offset, int count)
	{
		for (var i = offset; i <= count; ++i) { #>TValue<#= i #> value<#= i #><#+ if(i < count) { #>, <#+}}
	}
#>