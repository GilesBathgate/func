<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# const int CurryLimit = 6; #>
namespace Func
{
	using System;
	using System.Threading.Tasks;
	
	public static class TeeExtensionMethods
	{
<# for(var i = 1; i <= CurryLimit; ++i) { #>
		public static Task<TValue<#= i #>> Tee<<# WriteValueTypes(i); #>>(this Task<TValue<#= i #>> valueTask, Func<<# WriteValueTypes(i); #>, Task> func<# if(i > 1) { #>, <# } WriteValueTypesAndVariables(i - 1); #>) =>
			valueTask.ContinueWith(async value<#= i #> =>
			{
				await func(<# WriteValueVariables(i); #>.Result);
				return value<#= i #>.Result;
			}).Unwrap();

		public static Task<TValue<#= i #>> Tee<<# WriteValueTypes(i); #>>(this Task<TValue<#= i #>> valueTask, Action<<# WriteValueTypes(i); #>> func<# if(i > 1) { #>, <# } WriteValueTypesAndVariables(i - 1); #>) =>
			valueTask.ContinueWith(value<#= i #> =>
			{
				func(<# WriteValueVariables(i); #>.Result);
				return value<#= i #>.Result;
			});

		public static async Task<TValue<#= i #>> Tee<<# WriteValueTypes(i); #>>(this TValue<#= i #> value<#= i #>, Func<<# WriteValueTypes(i); #>, Task> func<# if(i > 1) { #>, <# } WriteValueTypesAndVariables(i - 1); #>)
		{
			await func(<# WriteValueVariables(i); #>);
			return value<#= i #>;
		}

		public static TValue<#= i #> Tee<<# WriteValueTypes(i); #>>(this TValue<#= i #> value<#= i #>, Action<<# WriteValueTypes(i); #>> func<# if(i > 1) { #>, <# } WriteValueTypesAndVariables(i - 1); #>)
		{
			func(<# WriteValueVariables(i); #>);
			return value<#= i #>;
		}

		public static Task<TValue<#= i #>> Tee<<# WriteValueTypes(i); #>, TIgnored>(this Task<TValue<#= i #>> valueTask, Func<<# WriteValueTypes(i); #>, Task<TIgnored>> func<# if(i > 1) { #>, <# } WriteValueTypesAndVariables(i - 1); #>) =>
			valueTask.ContinueWith(async value<#= i #> =>
			{
				await func(<# WriteValueVariables(i); #>.Result);
				return value<#= i #>.Result;
			}).Unwrap();

		public static Task<TValue<#= i #>> Tee<<# WriteValueTypes(i); #>, TIgnored>(this Task<TValue<#= i #>> valueTask, Func<<# WriteValueTypes(i); #>, TIgnored> func<# if(i > 1) { #>, <# } WriteValueTypesAndVariables(i - 1); #>) =>
			valueTask.ContinueWith(value<#= i #> =>
			{
				func(<# WriteValueVariables(i); #>.Result);
				return value<#= i #>.Result;
			});

		public static async Task<TValue<#= i #>> Tee<<# WriteValueTypes(i); #>, TIgnored>(this TValue<#= i #> value<#= i #>, Func<<# WriteValueTypes(i); #>, Task<TIgnored>> func<# if(i > 1) { #>, <# } WriteValueTypesAndVariables(i - 1); #>)
		{
			await func(<# WriteValueVariables(i); #>);
			return value<#= i #>;
		}

		public static TValue<#= i #> Tee<<# WriteValueTypes(i); #>, TIgnored>(this TValue<#= i #> value<#= i #>, Func<<# WriteValueTypes(i); #>, TIgnored> func<# if(i > 1) { #>, <# } WriteValueTypesAndVariables(i - 1); #>)
		{
			func(<# WriteValueVariables(i); #>);
			return value<#= i #>;
		}

<# } #>
	}
}

<#+
	void WriteValueTypes(int count)
	{
		for (var i = 1; i <= count; ++i) { #>TValue<#= i #><#+ if(i < count) { #>, <#+}}
	}

	void WriteValueVariables(int count)
	{
		for (var i = 1; i <= count; ++i) { #>value<#= i #><#+ if(i < count) { #>, <#+}}
	}
	
	void WriteValueTypesAndVariables(int count)
	{
		for (var i = 1; i <= count; ++i) { #>TValue<#= i #> value<#= i #><#+ if(i < count) { #>, <#+}}
	}
#>