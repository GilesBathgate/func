<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# const int ArgumentLimit = 15; #>
namespace Func
{
	using System;

	public static class Currying
	{	
<# for(var i = 2; i <= ArgumentLimit; ++i) { #>
		public static <# WriteValueFuncs(i); #>Func<TValue<#= i #>, TResult<# WriteClosingBrackets(i); #> Curry<<# WriteValueTypes(i); #>, TResult>(Func<<# WriteValueTypes(i); #>, TResult> func) =>
			<# WriteValueLambdas(i); #>func(<# WriteValueArguments(i); #>);

		public static <# WriteValueFuncs(i); #>Action<TValue<#= i #><# WriteClosingBrackets(i); #> Curry<<# WriteValueTypes(i); #>>(Action<<# WriteValueTypes(i); #>> func) =>
			<# WriteValueLambdas(i); #>func(<# WriteValueArguments(i); #>);

<# } #>
	}
}
<#+
	void WriteValueTypes(int count)
	{
		for (var i = 1; i <= count; ++i) { #>TValue<#= i #><#+ if(i < count) { #>, <#+}}
	}

	void WriteValueFuncs(int count)
	{
		for (var i = 1; i < count; ++i) { #>Func<TValue<#= i #>, <#+}
	}

	void WriteClosingBrackets(int count)
	{
		for (var i = 0; i < count; ++i) { #>><#+}
	}

	void WriteValueLambdas(int count)
	{
		for (var i = 1; i <= count; ++i) { #>value<#= i #> => <#+}
	}

	void WriteValueArguments(int count)
	{
		for (var i = 1; i <= count; ++i) { #>value<#= i #><#+ if(i < count) { #>, <#+}}
	}
#>