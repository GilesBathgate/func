<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# const int CurryLimit = 15; #>
namespace FunCSharp
{
	using System;
	using System.Threading.Tasks;

	public static class MapExtensionMethods
	{
<# for(var i = 1; i <= CurryLimit; ++i) { #>
		public static Task<TResult> Map<<# WriteValueTypes(i); #>, TResult>(this Task<TValue<#= i #>> valueTask, Func<<# WriteValueTypes(i); #>, Task<TResult>> func<# if(i > 1) { #>, <# } WriteValueTypesAndVariables(i - 1); #>) =>
			valueTask.ContinueWith(value<#= i #> => func(<# WriteValueVariables(i); #>.Result)).Unwrap();

		public static Task<TResult> Map<<# WriteValueTypes(i); #>, TResult>(this Task<TValue<#= i #>> valueTask, Func<<# WriteValueTypes(i); #>, TResult> func<# if(i > 1) { #>, <# } WriteValueTypesAndVariables(i - 1); #>) =>
			valueTask.ContinueWith(value<#= i #> => func(<# WriteValueVariables(i); #>.Result));

		public static TResult Map<<# WriteValueTypes(i); #>, TResult>(this TValue<#= i #> value<#= i #>, Func<<# WriteValueTypes(i); #>, TResult> func<# if(i > 1) { #>, <# } WriteValueTypesAndVariables(i - 1); #>) =>
			func(<# WriteValueVariables(i); #>);

<# } #>
	}
}

<#+
	void WriteValueTypes(int count)
	{
		for (var i = 1; i <= count; ++i) { #>TValue<#= i #><#+ if(i < count) { #>, <#+}}
	}

	void WriteValueVariables(int count)
	{
		for (var i = 1; i <= count; ++i) { #>value<#= i #><#+ if(i < count) { #>, <#+}}
	}
	
	void WriteValueTypesAndVariables(int count)
	{
		for (var i = 1; i <= count; ++i) { #>TValue<#= i #> value<#= i #><#+ if(i < count) { #>, <#+}}
	}
#>